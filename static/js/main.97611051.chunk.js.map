{"version":3,"sources":["serviceWorker.ts","state/todolist-reducer.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/MenuAppBar/HideAppBar.tsx","App.tsx","state/store.ts","index.tsx","components/Todolist/Todolist.module.scss","components/AddItemForm/AddItemForm.module.scss","App.module.scss"],"names":["Boolean","window","location","hostname","match","FilterValuesType","todolistsInitialState","taskInitialState","toggleTaskEditModeAC","todolistId","taskId","editMode","type","Alert","props","elevation","variant","reducer","state","action","error","errorMessage","titleText","title","Error","AddItemForm","React","memo","addItem","textMessage","labelMessage","useReducer","dispatch","useState","open","setOpen","handleClick","handleClose","event","reason","addTasksHandler","trim","noValidate","autoComplete","className","style","text_field","text_field_floating_2","Grid","container","item","xs","sm","TextField","width","id","multiline","maxRows","label","value","onChange","currentTarget","onKeyDown","key","Button","startIcon","marginLeft","height","color","btn","btn_input","onClick","Snackbar","autoHideDuration","onClose","severity","EditableSpan","toggleEditMode","activateEditMode","deactivateEditMode","newTitle","setNewTitle","console","log","onBlur","autoFocus","onDoubleClick","Task","task","keyForLabel","useDispatch","removeTask","useCallback","removeTaskAC","onChangeTaskStatus","isDone","changeTaskStatusAC","checked","changeTaskTitleAC","task_item","Tooltip","Checkbox","size","htmlFor","task_isDone","item_btn_container","IconButton","Todolist","changeFilter","filter","removeTodolist","tasksForTodolist","useSelector","tasks","addTaskAC","onAllClickHandler","all","onActiveClickHandler","active","onCompletedClickHandler","completed","t","todolist","todolist_header","header_title","spacing","map","v1","useStyles","makeStyles","theme","scrollTopButton","position","zIndex","bottom","right","menuButton","marginRight","flexGrow","textTransform","HideOnScroll","children","trigger","useScrollTrigger","Slide","appear","direction","in","ScrollTop","classes","disableHysteresis","threshold","Zoom","anchor","target","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","HideAppBar","CssBaseline","AppBar","Toolbar","edge","aria-label","Typography","Fab","App","todolists","addTodolist","addTodolistAC","removeTodolistAC","changeTodolistFilter","filterValue","changeTodolistFilterAC","Container","maxWidth","textAlign","marginTop","tl","md","Paper","padding","rootReducer","combineReducers","find","td","todolistTasks","updatedTasks","stateCopy","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.97611051.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {v1} from \"uuid\";\r\n\r\nexport enum FilterValuesType {\r\n    all = \"all\",\r\n    completed = \"completed\",\r\n    active = \"active\",\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValuesType;\r\n};\r\n\r\ntype TodolistStateType = Array<TodolistType>\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\ntype ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\ntype ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst todolistsInitialState: TodolistStateType = []\r\n\r\nexport const todolistReducer = (state: TodolistStateType = todolistsInitialState, action: ActionsType): TodolistStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {id: action.todolistId, title: action.title, filter: FilterValuesType.all,}]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((td) => td.id === action.id)\r\n            if (todolist)\r\n                todolist.title = action.title\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((td) => td.id === action.id)\r\n            if (todolist)\r\n                todolist.filter = action.filterValue\r\n            return [...state]\r\n        }\r\n        default:\r\n           return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId\r\n} as const)\r\nexport const addTodolistAC = (title: string) => ({\r\n    type: \"ADD-TODOLIST\",\r\n    title,\r\n    todolistId: v1()\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filterValue: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filterValue\r\n} as const)","import {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolist-reducer\";\r\n\r\ntype TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n    editMode: boolean;\r\n};\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\n\r\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\ntype ToggleTaskEditModeActionType = ReturnType<typeof toggleTaskEditModeAC>\r\n\r\ntype ActionType = ChangeTaskTitleActionType\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ToggleTaskEditModeActionType\r\n\r\n\r\nconst taskInitialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = taskInitialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\": {\r\n            const task = {id: v1(), title: action.title, isDone: false, editMode: false};\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [task, ...state[action.todolistId]]\r\n            }\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            const todolistTasks = state[action.todolistId]\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: todolistTasks.filter((t) => t.id !== action.taskId)\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const todolistTasks = state[action.todolistId]\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: todolistTasks.map(task =>\r\n                    task.id === action.taskId ? {...task, isDone: action.isDone} : task)\r\n            }\r\n        }\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            const todolistTasks = state[action.todolistId];\r\n            const updatedTasks = todolistTasks.map((task) =>\r\n                task.id === action.taskId ? {...task, title: action.title} : task\r\n            );\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updatedTasks,\r\n            };\r\n        }\r\n        case \"TOGGLE-TASK-EDIT-MODE\":{\r\n            const todolistTasks = state[action.todolistId];\r\n            const updatedTasks = todolistTasks.map((task) =>\r\n                task.id === action.taskId ? {...task, editMode: action.editMode} : task\r\n            );\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updatedTasks,\r\n            };\r\n        }\r\n\r\n        case \"ADD-TODOLIST\":{\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST':{\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addTaskAC = (todolistId: string, title: string) => ({\r\n    type: \"ADD-TASK\",\r\n    todolistId,\r\n    title\r\n} as const)\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: \"REMOVE-TASK\",\r\n    todolistId: todolistId,\r\n    taskId: taskId\r\n} as const)\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean) => ({\r\n    type: \"CHANGE-TASK-STATUS\",\r\n    todolistId,\r\n    taskId,\r\n    isDone\r\n} as const)\r\n\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string) => ({\r\n    type: \"CHANGE-TITLE-TASK\",\r\n    todolistId: todolistId,\r\n    taskId: taskId,\r\n    title: title\r\n} as const)\r\n\r\nexport const toggleTaskEditModeAC = (todolistId: string, taskId: string, editMode: boolean) => ({\r\n    type: \"TOGGLE-TASK-EDIT-MODE\",\r\n    todolistId,\r\n    taskId,\r\n    editMode\r\n} as const)\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState, useReducer} from \"react\";\r\nimport style from \"./AddItemForm.module.scss\";\r\nimport {Button, Grid, Snackbar, TextField} from \"@material-ui/core\";\r\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\n\r\nconst TEXT_ERROR_MESSAGE = \"Field can't be empty\"\r\nconst REMOVE_TEXT_ERROR = \"REMOVE-TEXT-ERROR\";\r\nconst ERROR_FIELD_IS_EMPTY = \"ERROR-FIELD-IS-EMPTY\";\r\nconst ERROR = \"ERROR\";\r\nconst REMOVE_ERROR = \"REMOVE_ERROR\";\r\nconst CURRENT_TARGET_VALUE = \"CURRENT_TARGET_VALUE\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n    textMessage: string\r\n    labelMessage: string\r\n};\r\n\r\ntype ActionType = {\r\n    type: string;\r\n    titleText?: string;\r\n};\r\n\r\ntype StateType = {\r\n    error: boolean\r\n    errorMessage: string;\r\n    title: string;\r\n};\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />}\r\n\r\nconst reducer = (state: StateType, action: ActionType): StateType => {\r\n    switch (action.type) {\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: true\r\n            };\r\n        case REMOVE_ERROR:\r\n            return {\r\n                ...state,\r\n                error: false\r\n            }\r\n        case REMOVE_TEXT_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: (state.errorMessage = \"\"),\r\n            };\r\n        case ERROR_FIELD_IS_EMPTY:\r\n            return {\r\n                ...state,\r\n                errorMessage: (state.errorMessage = TEXT_ERROR_MESSAGE),\r\n            };\r\n        case CURRENT_TARGET_VALUE:\r\n            if (action.titleText) {\r\n                return {\r\n                    ...state,\r\n                    title: (state.title = action.titleText),\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    title: (state.title = \"\"),\r\n                };\r\n            }\r\n        default:\r\n            throw new Error(\"Bad action type\");\r\n    }\r\n};\r\n\r\nexport const AddItemForm = React.memo(({addItem, textMessage, labelMessage}: AddItemFormPropsType) => {\r\n    //console.log('render item form')\r\n    const [state, dispatch] = useReducer(reducer, {error: false, errorMessage: \"\", title: \"\"});\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({\r\n            type: CURRENT_TARGET_VALUE,\r\n            titleText: event.currentTarget.value,\r\n        });\r\n    };\r\n\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        dispatch({type: REMOVE_TEXT_ERROR});\r\n        if (event.key === \"Enter\") {\r\n            addTasksHandler();\r\n        }\r\n    };\r\n\r\n    const addTasksHandler = () => {\r\n        if (state.title.trim() === \"\") {\r\n            dispatch({type: ERROR_FIELD_IS_EMPTY});\r\n            dispatch({type: ERROR})\r\n            handleClick();\r\n            return;\r\n        }\r\n        addItem(state.title.trim());\r\n        dispatch({type: REMOVE_TEXT_ERROR});\r\n        dispatch({type: REMOVE_ERROR})\r\n        dispatch({type: CURRENT_TARGET_VALUE});\r\n        handleClick();\r\n    };\r\n    return (\r\n        <form\r\n            noValidate\r\n            autoComplete=\"off\"\r\n            className={`${style.text_field} ${style.text_field_floating_2}`}\r\n        >\r\n            <Grid container>\r\n                <Grid item xs={12} sm={10}>\r\n                    <TextField\r\n                        style={{width: \"100%\"}}\r\n                        error={!!state.errorMessage}\r\n                        variant=\"outlined\"\r\n                        id=\"standard-multiline-flexible\"\r\n                        multiline\r\n                        maxRows={4}\r\n                        label={state.errorMessage ? state.errorMessage : labelMessage}\r\n                        value={state.title}\r\n                        onChange={onChangeHandler}\r\n                        onKeyDown={onKeyPressHandler}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={2}>\r\n                    <Button\r\n                        startIcon={<AddBoxIcon/>}\r\n                        style={{marginLeft: \"5px\", width: \"100%\", height: \"100%\"}}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        className={`${style.btn} ${style.btn_input}`}\r\n                        onClick={addTasksHandler}>\r\n                        create\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={!!state.error ? \"error\" : \"success\"}>\r\n                    {!!state.error ? TEXT_ERROR_MESSAGE : textMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n        </form>\r\n    );\r\n})\r\n\r\n","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    newTitle: string\r\n    setNewTitle: (value: string) => void\r\n    title: string;\r\n    toggleEditMode: boolean;\r\n    activateEditMode: () => void;\r\n    deactivateEditMode: () => void;\r\n};\r\nexport const EditableSpan = React.memo(({title, toggleEditMode, activateEditMode, deactivateEditMode, newTitle, setNewTitle}: EditableSpanPropsType) => {\r\n    console.log('render editable span')\r\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setNewTitle(event.currentTarget.value);\r\n    };\r\n    return (\r\n        <>\r\n            {toggleEditMode ? (\r\n                <TextField\r\n                    style={{width:\"100%\" }}\r\n                    id=\"standard-multiline-flexible\"\r\n                    multiline\r\n                    maxRows={5}\r\n                    value={newTitle}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={deactivateEditMode}\r\n                    autoFocus\r\n                />\r\n            ) : (\r\n                <span onDoubleClick={activateEditMode}>{title}</span>\r\n            )}\r\n        </>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport style from \"../Todolist/Todolist.module.scss\";\r\nimport {Checkbox, IconButton, Tooltip} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TaskType} from \"../Todolist/Todolist\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, toggleTaskEditModeAC} from \"../../state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsTaskType = {\r\n    keyForLabel: string\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo(({task, todolistId, keyForLabel}: PropsTaskType) => {\r\n    console.log('render task')\r\n    const dispatch = useDispatch()\r\n    const [newTitle, setNewTitle] = useState(\"\");\r\n    const removeTask = useCallback(() => dispatch(removeTaskAC(todolistId, task.id)), [dispatch,todolistId,task.id])\r\n\r\n    const onChangeTaskStatus = useCallback( (event: ChangeEvent<HTMLInputElement>) =>{\r\n        dispatch(changeTaskStatusAC(todolistId, task.id, event.currentTarget.checked))\r\n    }, [dispatch,todolistId, task.id])\r\n\r\n    const activateEditMode = useCallback(() => {\r\n        dispatch(toggleTaskEditModeAC(todolistId, task.id, true))\r\n        setNewTitle(task.title);\r\n    },[dispatch, todolistId, task.id, task.title, setNewTitle]);\r\n\r\n    const deactivateEditMode = useCallback(() => {\r\n        dispatch(toggleTaskEditModeAC(todolistId, task.id, false))\r\n        dispatch(changeTaskTitleAC(todolistId, task.id, newTitle))\r\n    }, [dispatch, todolistId, task.id, newTitle]);\r\n    \r\n    return (\r\n        <li key={task.id} className={`${style.task_item}`}>\r\n            <Tooltip title=\"completed\">\r\n                <Checkbox\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                    id={keyForLabel}\r\n                    checked={task.isDone}\r\n                    onChange={onChangeTaskStatus}\r\n                />\r\n            </Tooltip>\r\n            <label\r\n                htmlFor={keyForLabel}\r\n                className={`${task.isDone ? style.task_isDone : \"\"}`}>\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    newTitle={newTitle}\r\n                    setNewTitle={setNewTitle}\r\n                    toggleEditMode={task.editMode}\r\n                    activateEditMode={activateEditMode}\r\n                    deactivateEditMode={deactivateEditMode}\r\n                />\r\n            </label>\r\n            <div className={style.item_btn_container}>\r\n                <Tooltip title=\"Edit\">\r\n                    <IconButton\r\n                        onClick={activateEditMode}\r\n                        color=\"primary\"\r\n                        size=\"small\">\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton\r\n                        onClick={removeTask}\r\n                        color=\"secondary\"\r\n                        size=\"small\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        </li>\r\n    );})","import React, {useCallback} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from \"./Todolist.module.scss\"\r\nimport { v1 } from \"uuid\";\r\nimport { FilterValuesType} from \"../../state/todolist-reducer\";\r\nimport {addTaskAC,} from \"../../state/tasks-reducer\";\r\nimport {AppStateType} from \"../../state/store\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\r\nimport BallotIcon from \"@material-ui/icons/Ballot\";\r\nimport {Task} from \"../Task/Task\";\r\n\r\nexport type TaskType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n  editMode: boolean;\r\n};\r\n\r\ntype TodolistPropsType = {\r\n  todolistId: string;\r\n  title: string;\r\n  changeFilter: (todolistId: string, filterValue: FilterValuesType) => void;\r\n  filter: FilterValuesType;\r\n  removeTodolist: (todolistId: string) => void\r\n};\r\n\r\nexport const Todolist = React.memo(({todolistId,title,changeFilter,filter,removeTodolist}: TodolistPropsType) => {\r\n    console.log('render todolist')\r\n  let tasksForTodolist = useSelector<AppStateType, Array<TaskType>>((state => state.tasks[todolistId]));\r\n  const dispatch = useDispatch();\r\n\r\n  const removeTodolistHandler = () => {\r\n    removeTodolist(todolistId)\r\n  };\r\n  // const changeTitleTodolistHandler = (title: string) => {\r\n  //   dispatch(changeTodolistTitleAC(props.id, title))\r\n  // };\r\n  const addTasksHandler = useCallback( (title: string) => {\r\n    dispatch(addTaskAC(todolistId, title.trim()))\r\n  },[dispatch,todolistId]);\r\n\r\n  const onAllClickHandler = useCallback(() => changeFilter(todolistId, FilterValuesType.all),[changeFilter, todolistId]);\r\n  const onActiveClickHandler = useCallback(() => changeFilter(todolistId, FilterValuesType.active),[changeFilter, todolistId]);\r\n  const onCompletedClickHandler = useCallback(() => changeFilter(todolistId, FilterValuesType.completed),[changeFilter, todolistId]);\r\n\r\n  if (filter === FilterValuesType.completed) {\r\n    tasksForTodolist = tasksForTodolist.filter((t) => t.isDone);\r\n  }\r\n  if (filter === FilterValuesType.active) {\r\n    tasksForTodolist = tasksForTodolist.filter((t) => !t.isDone);\r\n  }\r\n\r\n  return (\r\n    <div className={style.todolist}>\r\n      <div className={style.todolist_header}>\r\n        <h3 className={style.header_title}>\r\n          {title}\r\n          {/*<EditableSpan*/}\r\n        </h3>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          startIcon={<DeleteIcon />}\r\n          onClick={removeTodolistHandler}\r\n        >remove</Button>\r\n      </div>\r\n      <div>\r\n        <AddItemForm\r\n            addItem={addTasksHandler}\r\n            textMessage=\"Task created successfully!\"\r\n            labelMessage=\"Add a new task...\"/>\r\n      </div>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={4}>\r\n            <Button\r\n              style={{ width: \"100%\" }}\r\n              color={filter === FilterValuesType.all ? \"primary\" : \"default\"}\r\n              startIcon={<ReceiptIcon />}\r\n              variant=\"contained\"\r\n              onClick={onAllClickHandler}>\r\n              All\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Button\r\n              style={{ width: \"100%\" }}\r\n              color={filter === FilterValuesType.active ? \"primary\" : \"default\"}\r\n              startIcon={<BallotIcon />}\r\n              variant=\"contained\"\r\n              onClick={onActiveClickHandler}>\r\n              Active\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Button\r\n              style={{width: \"100%\"}}\r\n              color={filter === FilterValuesType.completed ? \"primary\" : \"default\"}\r\n              startIcon={<AssignmentTurnedInIcon />}\r\n              variant=\"contained\"\r\n              onClick={onCompletedClickHandler}>\r\n              Completed\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      <ul>\r\n        {tasksForTodolist.map((task: TaskType) => {\r\n          const keyForLabel = v1();\r\n          return (\r\n              <Task\r\n                  key={task.id}\r\n                  task={task}\r\n                  todolistId={todolistId}\r\n                  keyForLabel={keyForLabel}\r\n              />);\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\ninterface Props {\r\n\tchildren: React.ReactElement;\r\n  }\r\nconst useStyles = makeStyles((theme) => ({\r\n\tscrollTopButton: {\r\n\t\tposition: 'fixed',\r\n\t\tzIndex: 9999,\r\n\t\tbottom: theme.spacing(2),\r\n\t\tright: theme.spacing(2),\r\n\t},\r\n\tmenuButton: {\r\n\t  marginRight: theme.spacing(2),\r\n\t},\r\n\ttitle: {\r\n\t  flexGrow: 1,\r\n\t  textTransform: \"uppercase\"\r\n\t},\r\n  }));\r\n  \r\nfunction HideOnScroll(props: Props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger();\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\nfunction ScrollTop(props: Props) {\r\n\tconst { children } = props;\r\n\tconst classes = useStyles();\r\n\tconst trigger = useScrollTrigger({\r\n\t  disableHysteresis: true,\r\n\t  threshold: 100,\r\n\t});\r\n\tconst handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n\t  const anchor = ((event.target as HTMLDivElement).ownerDocument || document).querySelector(\r\n\t\t'#back-to-top-anchor',\r\n\t  );\r\n  \r\n\t  if (anchor) {\r\n\t\tanchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n\t  }\r\n\t};\r\n  \r\n\treturn (\r\n\t  <Zoom in={trigger}>\r\n\t\t<div onClick={handleClick} role=\"presentation\" className={classes.scrollTopButton}>\r\n\t\t  {children}\r\n\t\t</div>\r\n\t  </Zoom>\r\n\t);\r\n  }\r\nexport default function HideAppBar() {\r\n\tconst classes = useStyles();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <HideOnScroll>\r\n\t  <AppBar>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Todolist\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      </HideOnScroll>\r\n      <Toolbar id=\"back-to-top-anchor\"/>\r\n\t  <ScrollTop>\r\n        <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n          <KeyboardArrowUpIcon />\r\n        </Fab>\r\n      </ScrollTop>\r\n    </>\r\n  );\r\n}\r\n","import React, {useCallback} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from \"./App.module.scss\";\r\nimport {Todolist} from \"./components/Todolist/Todolist\";\r\nimport { AddItemForm } from \"./components/AddItemForm/AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport HideAppBar from \"./components/MenuAppBar/HideAppBar\";\r\nimport {addTodolistAC, changeTodolistFilterAC, FilterValuesType, removeTodolistAC, TodolistType} from \"./state/todolist-reducer\";\r\nimport {AppStateType} from \"./state/store\";\r\n\r\n\r\nfunction App() {\r\n    console.log(\"render app\")\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppStateType, Array<TodolistType>>((state => state.todolists));\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback(\r\n        (todolistId: string) => {\r\n        dispatch(removeTodolistAC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistFilter = useCallback(\r\n        (todolistId: string, filterValue: FilterValuesType) => {\r\n            dispatch(changeTodolistFilterAC(todolistId, filterValue))\r\n        }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <HideAppBar/>\r\n            <Container maxWidth=\"xl\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", marginTop: \"20px\"}}>\r\n                        <h1 className={style.header_title}>my todolists</h1>\r\n                        <AddItemForm\r\n                            addItem={addTodolist}\r\n                            textMessage=\"Todolist created successfully!\"\r\n                            labelMessage=\"Add a new to-do list...\"\r\n                        />\r\n                    </Grid>\r\n                    {todolists.map((tl) => {\r\n                        return (\r\n                            <Grid item xs={12} md={6} key={tl.id}>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    variant=\"outlined\"\r\n                                    style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        todolistId={tl.id}\r\n                                        key={tl.id}\r\n                                        title={tl.title}\r\n                                        changeFilter={changeTodolistFilter}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: tasksReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppUseReducer from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppUseReducer/>\r\n    </Provider>\r\n    ,document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__sgA6W\",\"todolist_header\":\"Todolist_todolist_header__3lVJJ\",\"header_title\":\"Todolist_header_title__1ruaJ\",\"task_item\":\"Todolist_task_item__3MqWN\",\"task_isDone\":\"Todolist_task_isDone__1MLTy\",\"item_btn_container\":\"Todolist_item_btn_container__hPR4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"AddItemForm_btn__7HHZc\",\"text_field\":\"AddItemForm_text_field__22g1n\",\"text_field__label\":\"AddItemForm_text_field__label__2y7zV\",\"text_field__input\":\"AddItemForm_text_field__input__XnxUI\",\"text_field_floating_2\":\"AddItemForm_text_field_floating_2__2lRdS\",\"error\":\"AddItemForm_error__1ncms\",\"btn_input\":\"AddItemForm_btn_input__2QjMo\",\"active_filter\":\"AddItemForm_active_filter__23tUH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_title\":\"App_header_title__3sOCX\"};"],"sourceRoot":""}